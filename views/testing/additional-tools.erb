<section id="additional-tools" class="slide">
  <div class="vcenter">
    <h1>Additional tools</h1>
  </div>
</section>

<section class="slide" id="additional-tools-mutation">
  <h2>Mutation testing</h2>
  <ul>
    <li>Used to design new software tests and evaluate the quality of existing software tests</li>
    <li>By testing completeness of coverage of cases</li>
    <li>Modifies a program's source code or byte code in small ways</li>
    <li>Each mutated version is called a mutant</li>
    <li>If test suit fails - the mutant killed</li>
    <li>May require a significant increase of number of test cases</li>
  </ul>
</section>

<section class="slide" id="additional-tools-mutation-examples">
  <h2>What is mutated</h2>
  <p>Here are some examples of mutation operators for imperative languages:</p>
  <ul>
    <li class="slide" id="additional-tools-mutation-examples-1">Statement deletion</li>
    <li class="slide" id="additional-tools-mutation-examples-2">Statement duplication or insertion, e.g. goto fail</li>
    <li class="slide" id="additional-tools-mutation-examples-3">Replacement of boolean subexpressions with true and false</li>
    <li class="slide" id="additional-tools-mutation-examples-4">Replacement of some arithmetic operations with others, e.g. + with *, - with /</li>
    <li class="slide" id="additional-tools-mutation-examples-5">Replacement of some boolean relations with others, e.g. &lt; with &lt;=, == and &gt;=</li>
    <li class="slide" id="additional-tools-mutation-examples-6">Replacement of variables with others from the same scope (variable types must be compatible)</li>
  </ul>
</section>

<section class="slide" id="additional-tools-other">
  <h2>There are a lot more things...</h2>
  <ul>
    <li class="slide" id="additional-tools-other-1">
      <h3>Load testing</h3>
      <p>Is the process of putting demand on a system or device and measuring its response.</p>
    </li>
    <li class="slide" id="additional-tools-other-2">
      <h3>Fuzz testing</h3>
      <p>Involves providing invalid, unexpected, or random data to the inputs of a computer program.
        The program is then monitored for exceptions such as crashes,
        or failing built-in code assertions or for finding potential memory leaks.
        Fuzzing is commonly used to test for security problems in software or computer systems.</p>
    </li>
    <li class="slide" id="additional-tools-other-3">
      <h3>Test-driven infrastructure</h3>
      <p>Approach for the developing of infrastructure, that involves testing of configurations and automated provisioning.</p>
    </li>
  </ul>
</section>

<section class="slide" id="additional-tools-chaos-monkey">
  <h2>Chaos Monkey</h2>
  <p>
    Tool to test the resiliency and recoverability of Amazon Web Services. (<a href="http://cloud.dzone.com/articles/getting-know-chaos-monkey" target"_blank">Read more</a>)
  </p>
  <img class="slide chaos-monkey" id="additional-tools-chaos-monkey-img" src="/assets/testing/chaos-monkey.jpg" alt="Chaos Monkey"/>
  <div class="chaos-monkey-list">
    <ul>
      <li class="slide" id="additional-tools-chaos-monkey-1">simulates failures of instances of services running within Auto Scaling Groups (ASG)</li>
      <li class="slide" id="additional-tools-chaos-monkey-2">...by shutting down one or more of the virtual machines</li>
      <li class="slide" id="additional-tools-chaos-monkey-3">Principle: the best way to avoid major failures is to fail constantly</li>
      <li class="slide" id="additional-tools-chaos-monkey-4">Developed by Netflix engineers</li>
    </ul>
  </div>
</section>

